# http://en.wikipedia.org/wiki/English_draughts

Settings (
	PlayerCount: 2;
	PieceTypes: pawn, rook, knight, bishop, king, queen;
	BoardDimensions: {8, 8};
	RulesOfPlayer2: MirrorOfPlayer1;
)

# Functions()

Init (
	movedPieces := [];
	enPassant := False;
	enPassantCoords := {0,0};
)

StartingBoard (
	Player(1) (
		pawn: {1,2}; pawn: {2,2}; pawn: {3,2}; pawn: {4,2};
		pawn: {5,2}; pawn: {6,2}; pawn: {7,2}; pawn: {8,2};
		rook: {1,1}; rook: {8,1};
		knight: {2,1}; knight: {7,1};
		bishop: {3,1}; bishop: {6,1};
		king: {5,1};
		queen: {4,1};
	)
	Player(2) (
		pawn: {1,7}; pawn: {2,7}; pawn: {3,7}; pawn: {4,7};
		pawn: {5,7}; pawn: {6,7}; pawn: {7,7}; pawn: {8,7};
		rook: {1,8}; rook: {8,8};
		knight: {2,8}; knight: {7,8};
		bishop: {3,8}; bishop: {6,8};
		king: {5,8};
		queen: {4,8};
	)
)

Patterns (
	oneStepEmpty (
		Empty Target
	)
	oneStepOpponent (
		OppositePlayer Target
	)
	anyStepEmpty (
		Empty Target,
		Empty 0 .. 8
	)
	anyStepOpponent (
		OppositePlayer Target,
		Empty 0 .. 8
	)
	castleLeft (
		CurrentPlayer Target,
		Empty 3
	)
	castleRight (
		CurrentPlayer Target,
		Empty 2
	)
)

Moves (
	#Normal movement
	pawn: {_, _} -> Empty {x, y+1};
	pawn: {_, 2} -> Empty {x, y+2} If IsEmpty({x, y+1}) Then
		enPassant := True;
		# The board is mirrored for the opposite player, little hack...
		enPassantCoords := {x, 9-(y+1)};
	End;
	pawn: {_, _} -> {x+1, y+1} If PieceAt(to).Owner = OppositePlayer Then
		RemovePiece(to);
	End;
	pawn: {_, _} -> {x-1, y+1} If PieceAt(to).Owner = OppositePlayer Then
		RemovePiece(to);
	End;

	# En Passant
	pawn: {_, _} -> Empty {x+1, y+1} If to = enPassantCoords Then
		RemovePiece({x+1, y});
	End;
	pawn: {_, _} -> Empty {x-1, y+1} If to = enPassantCoords Then
		RemovePiece({x-1, y});
	End;


	king: {_, _} -> {_, _} If Match(from, to, Direction_Any, oneStepEmpty) Or Match(from, to, Direction_Any, oneStepOpponent) Then
		If (PieceAt(to).Owner = OppositePlayer) Then
			RemovePiece(to);
		End
	End;
	queen: {_, _} -> {_, _} If Match(from, to, Direction_Any, anyStepEmpty) Or Match(from, to, Direction_Any, anyStepOpponent) Then
		If (PieceAt(to).Owner = OppositePlayer) Then
			RemovePiece(to);
		End
	End;
	rook: {_, _} -> {_, _} If Match(from, to, Direction_Straight, anyStepEmpty) Or Match(from, to, Direction_Straight, anyStepOpponent) Then
		If (PieceAt(to).Owner = OppositePlayer) Then
			RemovePiece(to);
		End
	End;
	bishop: {_, _} -> {_, _} If Match(from, to, Direction_Diagonal, anyStepEmpty) Or Match(from, to, Direction_Diagonal, anyStepOpponent) Then
		If (PieceAt(to).Owner = OppositePlayer) Then
			RemovePiece(to);
		End
	End;

	knight: {_,_} -> {_,_}
		If (((Abs(from.x - to.x) = 2) And (Abs(from.y - to.y) = 1)) Or
		    ((Abs(from.x - to.x) = 1) And (Abs(from.y - to.y) = 2))) And
			(PieceAt(to).Owner != CurrentPlayer) Then

		If (PieceAt(to).Owner = OppositePlayer) Then
			RemovePiece(to);
		End
	End;

	#Castling
	#To the left:
	king: {_, _} -> {x-2, y} If Not Contains(movedPieces, king) And Not Contains(movedPieces, PieceAt({1, y})) And
		Match(from, {1, y}, Direction_Straight, castleLeft) Then
		RemovePiece({1, y});
		Place(rook, {4, y});
	End;
	#To the right:
	king: {_, _} -> {x+2, y} If Not Contains(movedPieces, king) And Not Contains(movedPieces, PieceAt({8, y})) And
		Match(from, {8, y}, Direction_Straight, castleRight) Then
		RemovePiece({8, y});
		Place(rook, {6, y});
	End;
)

Events (
	Player(1).CannotMove (
		# Stalemate
		Lose(Player(1));
		Lose(Player(2));
	)

	Player(1).FinishedMove (
		movedPieces := AddToSet(movedPieces, PieceAt(to));
		If Count([Select $ From Pieces Where Type = king And Owner = OppositePlayer]) = 0 Then
			Win(Player(1));
		End
		If Not enPassant Then
			enPassantCoords := {0,0};
		End
		enPassant := False;
	)
)
