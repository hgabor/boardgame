# Reversi / Ostábla

Settings (
	PlayerCount: 2;
	BoardDimensions: {8, 8};
	PieceTypes: piece;
	RulesOfPlayer2: SameAsPlayer1;
)

Functions (
	FlipAt(c) (
		p := PieceAt(c);
		If p.Owner = OppositePlayer Then
			RemovePiece(p);
			Place(piece, c);
		End
	)

	EndGame() (
		p1 := Count([Select $ From Pieces Where Owner = Player(1) And Position != None]);
		p2 := Count([Select $ From Pieces Where Owner = Player(2) And Position != None]);
		If p1 > p2 Then
			Win(Player(1));
		End
		If p1 < p2 Then
			Win(Player(2));
		End
		If p1 = p2 Then
			Lose(Player(1));
			Lose(Player(2));
		End
	)
)

Init (
	oppCannotMove := False;
)


StartingBoard (
	Player(1) (
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: {4, 5};
		piece: {5, 4};
	)
	Player(2) (
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: Offboard; piece: Offboard; piece: Offboard; piece: Offboard;
		piece: {4, 4};
		piece: {5, 5};
	)
)

Patterns (
	reversiPattern (
		Empty Target,
		OppositePlayer 1 .. 8,
		CurrentPlayer 1
	)
)

Moves (
	piece: Offboard -> Empty {_, _} If Match(
		to,
		Direction_Any,
		reversiPattern
	) Then
		set := GetMatching(to, Direction_Any, reversiPattern);
		ForEach(set, FlipAt);
	End;
)

Events (
	Player(1).CannotMove (
		If oppCannotMove Then
			EndGame();
		End
		oppCannotMove := True;
	)
	Player(1).FinishedMove (
		oppCannotMove := False;
	)
)
